# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:
#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#
homeassistant:
  # Location required to calculate the time the sun rises and sets
  latitude: !secret latitude_sec
  longitude: !secret longitude_sec
  # Impacts weather/sunrise data, majorly important for circadian_lighting (altitude above sea level in meters)
  elevation: !secret elevation_sec
  # metric for Metric, imperial for Imperial
  unit_system: imperial
  # http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: America/New_York
  whitelist_external_dirs:
    - /documentaries
    - /movies
    - /tv_shows
    - /ssl
#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#

automation: !include_dir_merge_list automations/
group: !include groups.yaml
notify: !include notify.yaml
panel_iframe: !include panel_iframe.yaml
script: !include_dir_merge_list scripts/
sensor: !include_dir_merge_list sensor/
switch: !include_dir_merge_list switch/
zone: !include zone.yaml

rest_command:
  #Basement
  circadian_lighting_basement_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_basement', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "1": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "9": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_basement_url
    
  #Bathroom
  circadian_lighting_bathroom_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_bathroom', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "6": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "22": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_bathroom_url
    
  #Bedroom
  circadian_lighting_bedroom_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_bedroom', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "18": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_bedroom_url
    
  #Dining Room
  circadian_lighting_dining_room_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_dining_room', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "10": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "11": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "20": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_dining_room_url
    
  #Entry Way
  circadian_lighting_entry_way_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_entry_way', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "25": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_entry_way_url
    
  #Family Room
  circadian_lighting_family_room_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_family_room', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "13": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "16": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "19": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_family_room_url
    
  #Guest Room
  circadian_lighting_guest_room_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_guest_room', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "27": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_guest_room_url
    
  #Kitchen
  circadian_lighting_kitchen_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_kitchen', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "7": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "14": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "15": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "21": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "23": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "26": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },
            
            "28": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }            
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_kitchen_url
    
  #Living Room
  circadian_lighting_living_room_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_living_room', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "4": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "8": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            },

            "12": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_living_room_url
    
  #Office
  circadian_lighting_office_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_office', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "17": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_office_url
    
  #Sun Room
  circadian_lighting_sun_room_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_sun_room', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "5": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_sun_room_url
    
  #Upstairs Hallway
  circadian_lighting_upstairs_hallway_hue_scene:
    content_type:  'application/json'
    method: put
    payload: >
      {% set brightness = state_attr('switch.circadian_lighting_circadian_upstairs_hall', 'brightness') %}
      {% set colortemp = state_attr('sensor.circadian_values', 'colortemp') %}
      {% if brightness is not none and colortemp is not none %}
        {% set bri = ((((brightness|float) * 254) / 100)|int) %}
        {% set ct = ((1000000 / (colortemp|float))|int) %}
        {
          "lightstates": {
            "24": {
              "on": true,
              "bri": {{bri}},
              "ct": {{ct}}
            }
          }
        }
      {% endif %}
    url: !secret rest_command_circadian_lighting_upstairs_hallway_url

###SYSTEM##################################################################################

breaking_changes:

# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Discover some devices automatically
discovery:

duckdns:
  domain: !secret duckdns_domain
  access_token: !secret duckdns_token

folder_watcher:
  - folder: /documentaries
    patterns:
      - '*.mp4'
      - '*.mkv'
  - folder: /movies
    patterns:
      - '*.mp4'
      - '*.mkv'
  - folder: /tv_shows
    patterns:
      - '*.mp4'
      - '*.mkv'

frontend:
# Add themes
  themes: !include themes.yaml

# Enable ES6 features
  javascript_version: latest

gdacs:
  categories:
    - Drought
    - Earthquake
    - Flood
    - Tropical Cyclone
    - Tsunami
    - Volcano
  radius: 1000
  latitude: !secret latitude_sec
  longitude: !secret longitude_sec
  
geo_location:
  - platform: usgs_earthquakes_feed
    entity_namespace: 'usgs_earthquakes_service_feed'
    feed_type: 'past_month_all_earthquakes'
    radius: 100
    minimum_magnitude: 0.0
  - platform: nsw_rural_fire_service_feed
    entity_namespace: 'nsw_fire_service_feed'
    radius: 100
  
hacs:
  token: !secret hacs_token
  theme: true
  python_script: true

# Enables support for tracking state changes over time
history:

http:
  base_url: !secret base_url
  ssl_certificate: !secret ssl_cert
  ssl_key: !secret ssl_key

# View all events in a logbook
logbook:

logger:
  default: info
  logs:
    custom_components.circadian_lighting: info
    custom_components.circadian_lighting.sensor: info
    custom_components.circadian_lighting.switch: info

# Enables a map showing the location of tracked devices
map:

#mqtt:
#  broker: !secret host_unraid
#mqtt_eventstream:
#  publish_topic: master/topic
#  subscribe_topic: slaves/#

# Track the sun
sun:

system_health:

# Text to speech
tts:
  - platform: google_translate

zeroconf:

#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------#

### USER ADDONS #####################################################################################

###Anniversaries/Countdowns/Tracking###

anniversaries:
  sensors:
  - name: Our Wedding Anniversary
    date: !secret anniversary_wedding
  - name: Grandpa - Memorial
    date: !secret memorial_gp_rew
  - name: Papaw - Memorial
    date: !secret memorial_gp_jlh
  - name: Gerald - Memorial
    date: !secret memorial_gp_e_gs
  - name: Robby's Work Anniversary
    date: !secret anniversary_work_rob

binary_sensor:
  - platform: iss
    show_on_map: true
  - platform: aurora

calendar:
  - platform: todoist
    token: !secret todoist_api

camera:
  - platform: nwsradar
    station: ILN
    style: Enhanced
    frames: 8
  - platform: unifiprotect
#  - platform: generic
#    name: Grafana_temperature
#    still_image_url: !secret grafana_temp_cam
  - platform: generic
    name: Doorbell
    still_image_url: !secret still_doorbell
    stream_source: !secret rtsp_doorbell

circadian_lighting:
  interval: 600
  max_colortemp: 10000
  min_colortemp: 2000

device_tracker:
  - platform: icloud3
    username: !secret icloud_un
    password: !secret icloud_password
    track_devices:
      - !secret icloud_1
      - !secret icloud_2
      - !secret icloud_3
      - !secret icloud_4
      - !secret icloud_5
      - !secret icloud_6
      - !secret icloud_7
      - !secret icloud_8
      - !secret icloud_9
      - !secret icloud_10
    tracking_method: fmf

ecobee:
  api_key: !secret ecobee_api

fastdotcom:
  scan_interval:
      minutes: 30

#freedns:
#  access_token: !secret freedns_token

garbage_collection:
  sensors:
  - name: "waste"
    frequency: "weekly"
    collection_days: "tue"
    verbose_state: true

google:
  client_id: !secret google_client
  client_secret: !secret google_secret

gpodder:
  username: !secret gpodder_un
  password: !secret gpodder_password

homekit:
  safe_mode: false
  filter:
   exclude_domains:
     - light
     - device_tracker

hue:
  bridges:
    - host: !secret host_hue
      allow_unreachable: false
      allow_hue_groups: true
      
#icloud:
#  - username: !secret icloud_un
#    password: !secret icloud_password
    
input_boolean:
  dummy_switch:

influxdb:
  host: !secret host_unraid_influx
  database: home_assistant

ios:

#light:
#  - platform: decora_wifi
#    username: !secret decora_un
#    password: !secret decora_password

lutron_caseta:
    host: !secret host_lutron
    keyfile: caseta.key
    certfile: caseta.crt
    ca_certs: caseta-bridge.crt

#media_player:
  # Use the Python ADB implementation without authentication
#  - platform: androidtv
#    name: Firestick
#    host: !secret host_firetv

openuv:
  api_key: !secret openuv_api
  binary_sensors:
    monitored_conditions:
      - uv_protection_window
  sensors:
    monitored_conditions:
      - current_ozone_level
      - current_uv_index
      - current_uv_level
      - max_uv_index
      - safe_exposure_time_type_1
      - safe_exposure_time_type_2
      - safe_exposure_time_type_3
      - safe_exposure_time_type_4
      - safe_exposure_time_type_5
      - safe_exposure_time_type_6

#owntracks:
 # max_gps_accuracy: 200
 # waypoints: true
 # mqtt_topic: "owntracks/#"
 # events_only: true

pi_hole:
  - host: !secret host_pi_hole
    name: 'Primary Pi-Hole'
  - host: !secret host_pi_hole_2
    name: 'Secondary Pi-Hole'

plex:
  host: !secret host_unraid
  port: 32400
  token: !secret plex_token
  ssl: false
  verify_ssl: false
  media_player:
    use_episode_art: true
    show_all_controls: true

remote:
  - platform: hueremote
  
speedtestdotnet:
  scan_interval:
    minutes: 60
  monitored_conditions:
    - ping
    - download
    - upload
    
unifiprotect:
  host: !secret host_udm
  username: !secret unifi_un_ha
  password: !secret unifi_pw_ha
  port: !secret unifi_port
  
vacuum:
 - platform: roomba
   host: !secret host_roomba
   username: !secret roomba_blid
   password: !secret roomba_password

weather:
 - platform: darksky
   api_key: !secret darksky_password
   latitude: !secret latitude_sec
   longitude: !secret longitude_sec