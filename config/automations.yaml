#Home assistant theme is set based on location of the sun; where when sun is up, theme is light, and visa versa
- alias: 'Set HA theme for day and night'
  trigger:
    - platform: homeassistant
      event: start
    - platform: state
      entity_id: sun.sun
      to: above_horizon
    - platform: state
      entity_id: sun.sun
      to: below_horizon
  action:
    - service_template: frontend.set_theme
      data_template:
        name: >
          {% if states.sun.sun.state == "above_horizon" %}
            Light - Navy Blue
          {% else %}
            slate
          {% endif %}

#Get weather alerts from NWS and supploy TTS devices with information to verbally alert
- alias: 'NWS Weather Alert Pop Up Control'
  trigger:
    platform: state
    entity_id: sensor.nws_alert_count
  action:
    service: script.nws_popup_on_wx_alert

- alias: NWS Notification Weather Alert
  trigger:
    platform: state
    entity_id: sensor.nws_alert_count
  condition:
    condition: template
    value_template: '{{states.sensor.nws_alert_count.state | int > 0}}'
  action:
    - service: notify.ecobee_main
      data:
        message: "National Weather Service: {{ states.sensor.nws_alert_event.state }}"
    - service: notify.nfandroidtv
      data:
        message: "National Weather Service: {{ states.sensor.nws_alert_event.state }}"

- alias: NWS Announcement Weather Alert
  trigger:
    - platform: state
      entity_id: sensor.nws_alert_count
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: '{{states.sensor.nws_alert_count.state | int > 0}}'
        ## Added a time condition because I don't want a non-emergency alert waking me up
      - condition: or
        conditions:
          - condition: time
            after: '09:00:00'
            before: '23:00:00'
          - condition: template
            value_template: >
              {{ 'Warning' in states.sensor.nws_alert_event.state }}
  action:
    - service: media_player.volume_set
      data:
        entity_id:
          - media_player.robert_s_ecobee4
          - media_player.robert_s_fire_tv_stick
        volume_level: 0.99
    - service: notify.alexa_media
      data_template:
        entity_id:
          - media_player.robert_s_ecobee4
          - media_player.robert_s_fire_tv_stick
        message: "Attention!. . . Attention!. . . The National Weather Service has issued a
        {{ states.sensor.nws_alert_event.state }} for Butler County.
        It expires at {{ as_timestamp(state_attr('sensor.nws_alert_event', 'features')[0].properties.expires)| timestamp_custom('%-I:%M %p on %-m-%-d-%Y') }}."
    - delay: '00:00:10'
    - service: notify.alexa_media
        data_template:
          entity_id:
            - media_player.robert_s_ecobee4
            - media_player.robert_s_fire_tv_stick
          message: "Attention!. . . Attention!. . . The National Weather Service has issued a
          {{ states.sensor.nws_alert_event.state }} for Butler County.
          It expires at {{ as_timestamp(state_attr('sensor.nws_alert_event', 'features')[0].properties.expires)| timestamp_custom('%-I:%M %p on %-m-%-d-%Y') }}."
    - service: media_player.alexa_tts
      data_template:
        entity_id:
          - media_player.robert_s_ecobee4
          - media_player.robert_s_fire_tv_stick
        message: "Attention!. . . Attention!. . . The National Weather Service has issued a
        {{ states.sensor.nws_alert_event.state }} for Butler County.
        It expires at {{ as_timestamp(state_attr('sensor.nws_alert_event', 'features')[0].properties.expires)| timestamp_custom('%-I:%M %p on %-m-%-d-%Y') }}."
    - delay: '00:00:10'
    - service: media_player.alexa_tts
      data_template:
        entity_id:
          - media_player.robert_s_ecobee4
          - media_player.robert_s_fire_tv_stick
        message: "Attention!. . . Attention!. . . The National Weather Service has issued a
        {{ states.sensor.nws_alert_event.state }} for Butler County.
        It expires at {{ as_timestamp(state_attr('sensor.nws_alert_event', 'features')[0].properties.expires)| timestamp_custom('%-I:%M %p on %-m-%-d-%Y') }}."



#Send discord notification when new media is added.
- alias: New file alert
  trigger:
    platform: event
    event_type: folder_watcher
    event_data:
      event_type: created
  action:
    service: notify.discord
    data_template:
      title: New media uploaded.
      message: "Created {{ trigger.event.data.file }} in {{ trigger.event.data.folder }}"
      data:
        file: "{{ trigger.event.data.path }}"



#Update OpenUV data every 30 min during daytime
- alias: Update OpenUV every 30 minutes during the daytime
  trigger:
    platform: time_pattern
    minutes: '/30'
  condition:
    condition: and
    conditions:
      - condition: sun
        after: sunrise
      - condition: sun
        before: sunset
  action:
    service: openuv.update_data
